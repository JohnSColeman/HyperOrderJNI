/*
 *  **** DO NOT EDIT THIS FILE - it is machine generated ***
 *
 *  Binding definitions header for class com_qbyteconsulting_HyperOrderIF
 *
 *  This file is included in the actual peer interface file
 *  and contains the bindings for the JNI stub to call.
 *
 *  Generated by: JPeerGen v0.9.0 - http://jpeergen.sf.net/
 */

#ifndef _Included_Binding_com_qbyteconsulting_HyperOrderIF
#define _Included_Binding_com_qbyteconsulting_HyperOrderIF

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    initialiseDLL
 * Signature: ()Z
 */
static jboolean Java_initialiseDLL(JNIEnv *env, jclass cls)
{
    return (jboolean)HyperOrderIFPeer::initialiseDLL();
}
static bool initialiseDLL();

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    isHostRunning
 * Signature: ()I
 */
static jint Java_isHostRunning(JNIEnv *env, jclass cls)
{
    return (jint)HyperOrderIFPeer::isHostRunning();
}
static int isHostRunning();

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    isHostConnected
 * Signature: ()I
 */
static jint Java_isHostConnected(JNIEnv *env, jclass cls)
{
    return (jint)HyperOrderIFPeer::isHostConnected();
}
static int isHostConnected();

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getAccountCashBalance
 * Signature: ()D
 */
static jdouble Java_getAccountCashBalance(JNIEnv *env, jclass cls)
{
    return (jdouble)HyperOrderIFPeer::getAccountCashBalance();
}
static double getAccountCashBalance();

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getAccountUpdateTime
 * Signature: ()I
 */
static jint Java_getAccountUpdateTime(JNIEnv *env, jclass cls)
{
    return (jint)HyperOrderIFPeer::getAccountUpdateTime();
}
static int getAccountUpdateTime();

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getAccountItem
 * Signature: (I)D
 */
static jdouble Java_getAccountItem(JNIEnv *env, jclass cls, jint number)
{
    return (jdouble)HyperOrderIFPeer::getAccountItem((int)number);
}
static double getAccountItem(int number);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getFirstOpenOrder
 * Signature: ()J
 */
static jlong Java_getFirstOpenOrder(JNIEnv *env, jclass cls)
{
    return (jlong)HyperOrderIFPeer::getFirstOpenOrder();
}
static long getFirstOpenOrder();

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getNextOpenOrder
 * Signature: (J)J
 */
static jlong Java_getNextOpenOrder(JNIEnv *env, jclass cls, jlong prevOrdId)
{
    return (jlong)HyperOrderIFPeer::getNextOpenOrder((long)prevOrdId);
}
static long getNextOpenOrder(long prevOrdId);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    buyMarket
 * Signature: ([C[C[C[CF[C[CI)J
 */
static jlong Java_buyMarket(JNIEnv *env, jclass cls, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    sellMarket
 * Signature: ([C[C[C[CF[C[CI)J
 */
static jlong Java_sellMarket(JNIEnv *env, jclass cls, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    buyLimit
 * Signature: ([C[C[C[CF[C[CIF)J
 */
static jlong Java_buyLimit(JNIEnv *env, jclass cls, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat limitPrice);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    sellLimit
 * Signature: ([C[C[C[CF[C[CIF)J
 */
static jlong Java_sellLimit(JNIEnv *env, jclass cls, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat limitPrice);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    buyStop
 * Signature: ([C[C[C[CF[C[CIF)J
 */
static jlong Java_buyStop(JNIEnv *env, jclass cls, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat auxPrice);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    sellStop
 * Signature: ([C[C[C[CF[C[CIF)J
 */
static jlong Java_sellStop(JNIEnv *env, jclass cls, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat auxPrice);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    buyStopLimit
 * Signature: ([C[C[C[CF[C[CIFF)J
 */
static jlong Java_buyStopLimit(JNIEnv *env, jclass cls, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat auxPrice, jfloat limitPrice);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    sellStopLimit
 * Signature: ([C[C[C[CF[C[CIFF)J
 */
static jlong Java_sellStopLimit(JNIEnv *env, jclass cls, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat auxPrice, jfloat limitPrice);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    BuyTrailStop
 * Signature: ([C[C[C[CF[C[CIF)J
 */
static jlong Java_BuyTrailStop(JNIEnv *env, jclass cls, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat auxDistance);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    sellTrailStop
 * Signature: ([C[C[C[CF[C[CIF)J
 */
static jlong Java_sellTrailStop(JNIEnv *env, jclass cls, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat auxDistance);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    cancelOrder
 * Signature: (J)V
 */
static void Java_cancelOrder(JNIEnv *env, jclass cls, jlong orderId)
{
    HyperOrderIFPeer::cancelOrder((long)orderId);
}
static void cancelOrder(long orderId);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    calcelAll
 * Signature: ()V
 */
static void Java_cancelAll(JNIEnv *env, jclass cls)
{
    HyperOrderIFPeer::cancelAll();
}
static void cancelAll();

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    cancelAllFor
 * Signature: ([C[C[C[CF[C[C)V
 */
static void Java_cancelAllFor(JNIEnv *env, jclass cls, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getMarketPosition
 * Signature: ([C[C[C[CF[C)J
 */
static jlong Java_getMarketPosition(JNIEnv *env, jclass cls, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring currency);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    closePositionFor
 * Signature: ([C[C[C[CF[C[C)J
 */
static jlong Java_closePositionFor(JNIEnv *env, jclass cls, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    startOCAGroup
 * Signature: ([C)V
 */
static void Java_startOCAGroup(JNIEnv *env, jclass cls, jstring ocaGroup);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    stopOCAGroup
 * Signature: ()V
 */
static void Java_stopOCAGroup(JNIEnv *env, jclass cls)
{
    HyperOrderIFPeer::stopOCAGroup();
}
static void stopOCAGroup();

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    setTIF
 * Signature: ([C)V
 */
static void Java_setTIF(JNIEnv *env, jclass cls, jstring tif);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getOrderStatus
 * Signature: (J)I
 */
static jint Java_getOrderStatus(JNIEnv *env, jclass cls, jlong orderId)
{
    return (jint)HyperOrderIFPeer::getOrderStatus((long)orderId);
}
static int getOrderStatus(long orderId);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getOrderPrice
 * Signature: (J)F
 */
static jfloat Java_getOrderPrice(JNIEnv *env, jclass cls, jlong orderId)
{
    return (jfloat)HyperOrderIFPeer::getOrderPrice((long)orderId);
}
static float getOrderPrice(long orderId);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getOrderFilled
 * Signature: (J)J
 */
static jlong Java_getOrderFilled(JNIEnv *env, jclass cls, jlong orderId)
{
    return (jlong)HyperOrderIFPeer::getOrderFilled((long)orderId);
}
static long getOrderFilled(long orderId);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getOrderRemaining
 * Signature: (J)J
 */
static jlong Java_getOrderRemaining(JNIEnv *env, jclass cls, jlong orderId)
{
    return (jlong)HyperOrderIFPeer::getOrderRemaining((long)orderId);
}
static long getOrderRemaining(long orderId);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    writeIntValue
 * Signature: ([CI)V
 */
static void Java_writeIntValue(JNIEnv *env, jclass cls, jstring name, jint value);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    readIntValue
 * Signature: ([C)I
 */
static jint Java_readIntValue(JNIEnv *env, jclass cls, jstring name);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    writeLongValue
 * Signature: ([CJ)V
 */
static void Java_writeLongValue(JNIEnv *env, jclass cls, jstring name, jlong value);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    readLongValue
 * Signature: ([C)J
 */
static jlong Java_readLongValue(JNIEnv *env, jclass cls, jstring name);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    writeFloatValue
 * Signature: ([CF)V
 */
static void Java_writeFloatValue(JNIEnv *env, jclass cls, jstring name, jfloat value);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    readFloatValue
 * Signature: ([C)F
 */
static jfloat Java_readFloatValue(JNIEnv *env, jclass cls, jstring name);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    writeStringValue
 * Signature: ([C[C)V
 */
static void Java_writeStringValue(JNIEnv *env, jclass cls, jstring name, jstring value);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    readStringValue
 * Signature: ([C)Ljava/lang/String;
 */
static jstring Java_readStringValue(JNIEnv *env, jclass cls, jstring name);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    soundAlert
 * Signature: ([C)V
 */
static void Java_soundAlert(JNIEnv *env, jclass cls, jstring path);

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    popupAlert
 * Signature: ([C[C)V
 */
static void Java_popupAlert(JNIEnv *env, jclass cls, jstring text, jstring path);


/*
 *  Returns the C++ peer instance associated with the
 *  specified Java object.
 */
/*static HyperOrderIFPeer *getPeer( jobject javaPeer )
{
    return( getPeer( JniUtils::attachThread(), javaPeer ) );
}*/
/*
 *  Returns the C++ peer instance associated with the
 *  specified Java object.
 */
static HyperOrderIFPeer *getPeer( JNIEnv *env, jobject javaPeer )
{
    static jfieldID fid_peer = NULL; // cached field ID for peer

    HyperOrderIFPeer *peerObject;
    jclass cls;
    if( fid_peer == NULL ) {
        cls = env->GetObjectClass( javaPeer );
        fid_peer = env->GetFieldID( cls, "peer", "J" );
    }

    if( fid_peer == NULL ) {
        printf( "ERROR: Java class does not define a peer field.\n" );
    }

    jlong peerVal = env->GetLongField( javaPeer, fid_peer );
    if( peerVal == 0 ) {
       // Need to create the peer object
       peerObject = new HyperOrderIFPeer();
       peerObject->attachPeer( env, javaPeer );
       peerVal = reinterpret_cast<jlong>(peerObject);
       env->SetLongField( javaPeer, fid_peer, peerVal );
    } else {
       // Get the current peer in object form
       peerObject = reinterpret_cast<HyperOrderIFPeer *>(peerVal);
    }

    return( peerObject );
}

private:
jobject javaPeer;

void attachPeer( JNIEnv *env, jobject javaPeer )
{
    // Set the Java object reverse reference
    // We assume that the passed in jobject is a local
    // reference and therefore we create a global one
    // so it doesn't disappear on us.
    this->javaPeer = env->NewGlobalRef( javaPeer );
}


public:
#endif
