/*
 *  Implementation for class Main
 *  This file is initially generated, but is user editable.
 *  This actually poses some inconvenience when the .java file
 *  changes because this file won't be regenerated, most likely,
 *  since then all of the implementation code would be wiped out.
 *  That means this file must be hand-updated when the JNI function
 *  declarations change.
 *
 *  Initially generated by: JPeerGen v0.9.0 - http://jpeergen.sf.net/
 */
#include <jni.h>
#include "HyperOrderIFPeer.h"
#include "hoctsintf.h"

HINSTANCE hndDLL = NULL;

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    initialiseDLL
 * Signature: ()Z
 */
bool HyperOrderIFPeer::initialiseDLL()
{
    // Replace the return with an appropriate value
	if (hndDLL == NULL)
	{
		hndDLL = LoadLibrary("hocts.dll");
		if (hndDLL == NULL)
			return FALSE;
//Host Information Functions
		IsHostRunning = (ISHOSTRUNNING) GetProcAddress(hndDLL,"ISHOSTRUNNING");
		if (!IsHostRunning)
			return FALSE;
		IsHostConnected = (ISHOSTCONNECTED) GetProcAddress(hndDLL,"ISHOSTCONNECTED");
		if (!IsHostConnected)
			return FALSE;
//Account Information Functions
		GetAccountCashBalance = (GETACCOUNTCASHBALANCE) GetProcAddress(hndDLL,"GETACCOUNTCASHBALANCE");
		if (!GetAccountCashBalance)
			return FALSE;
		GetAccountUpdateTime = (GETACCOUNTUPDATETIME) GetProcAddress(hndDLL,"GETACCOUNTUPDATETIME");
		if (!GetAccountUpdateTime)
			return FALSE;
		GetAccountItem = (GETACCOUNTITEM) GetProcAddress(hndDLL,"GETACCOUNTITEM");
		if (!GetAccountItem)
			return FALSE;
//Open Orders Information Functions
		GetFirstOpenOrder = (GETFIRSTOPENORDER) GetProcAddress(hndDLL,"GETFIRSTOPENORDER");
		if (!GetFirstOpenOrder)
			return FALSE;
		GetNextOpenOrder = (GETNEXTOPENORDER) GetProcAddress(hndDLL,"GETNEXTOPENORDER");
		if (!GetNextOpenOrder)
			return FALSE;
//Order Execution Functions
		BuyMarket = (BUYMARKET) GetProcAddress(hndDLL,"BUYMARKET");
		if (!BuyMarket)
			return FALSE;
		SellMarket = (SELLMARKET) GetProcAddress(hndDLL,"SELLMARKET");
		if (!SellMarket)
			return FALSE;
		BuyLimit = (BUYLIMIT) GetProcAddress(hndDLL,"BUYLIMIT");
		if (!BuyLimit)
			return FALSE;
		SellLimit = (SELLLIMIT) GetProcAddress(hndDLL,"SELLLIMIT");
		if (!SellLimit)
			return FALSE;
		BuyStop = (BUYSTOP) GetProcAddress(hndDLL,"BUYSTOP");
		if (!BuyStop)
			return FALSE;
		SellStop = (SELLSTOP) GetProcAddress(hndDLL,"SELLSTOP");
		if (!SellStop)
			return FALSE;
		BuyStopLimit = (BUYSTOPLIMIT) GetProcAddress(hndDLL,"BUYSTOPLIMIT");
		if (!BuyStopLimit)
			return FALSE;
		SellStopLimit = (SELLSTOPLIMIT) GetProcAddress(hndDLL,"SELLSTOPLIMIT");
		if (!SellStopLimit)
			return FALSE;
		BuyTrailStop = (BUYTRAILSTOP) GetProcAddress(hndDLL,"BUYTRAILSTOP");
		if (!BuyTrailStop)
			return FALSE;
		SellTrailStop = (SELLTRAILSTOP) GetProcAddress(hndDLL,"SELLTRAILSTOP");
		if (!SellTrailStop)
			return FALSE;
		CancelOrder = (CANCELORDER) GetProcAddress(hndDLL,"CANCELORDER");
		if (!CancelOrder)
			return FALSE;
		CancelAll = (CANCELALL) GetProcAddress(hndDLL,"CANCELALL");
		if (!CancelAll)
			return FALSE;
		CancelAllFor = (CANCELALLFOR) GetProcAddress(hndDLL,"CANCELALLFOR");
		if (!CancelAllFor)
			return FALSE;
		GetMarketPosition = (GETMARKETPOSITION) GetProcAddress(hndDLL,"GETMARKETPOSITION");
		if (!GetMarketPosition)
			return FALSE;
		ClosePositionFor = (CLOSEPOSITIONFOR) GetProcAddress(hndDLL,"CLOSEPOSITIONFOR");
		if (!ClosePositionFor)
			return FALSE;
		StartOCAGroup = (STARTOCAGROUP) GetProcAddress(hndDLL,"STARTOCAGROUP");
		if (!StartOCAGroup)
			return FALSE;
		StopOCAGroup = (STOPOCAGROUP) GetProcAddress(hndDLL,"STOPOCAGROUP");
		if (!StopOCAGroup)
			return FALSE;
		SetTIF = (SETTIF) GetProcAddress(hndDLL,"SETTIF");
		if (!SetTIF)
			return FALSE;
//Order Information Functions
		GetOrderStatus = (GETORDERSTATUS) GetProcAddress(hndDLL,"GETORDERSTATUS");
		if (!GetOrderStatus)
			return FALSE;
		GetOrderPrice = (GETORDERPRICE) GetProcAddress(hndDLL,"GETORDERPRICE");
		if (!GetOrderPrice)
			return FALSE;
		GetOrderFilled = (GETORDERFILLED) GetProcAddress(hndDLL,"GETORDERFILLED");
		if (!GetOrderFilled)
			return FALSE;
		GetOrderRemaining = (GETORDERREMAINING) GetProcAddress(hndDLL,"GETORDERREMAINING");
		if (!GetOrderRemaining)
			return FALSE;
//Global Variables Functions
		WriteIntValue = (WRITEINTVALUE) GetProcAddress(hndDLL,"WRITEINTVALUE");
		if (!WriteIntValue)
			return FALSE;
		ReadIntValue = (READINTVALUE) GetProcAddress(hndDLL,"READINTVALUE");
		if (!ReadIntValue)
			return FALSE;
		WriteLongValue = (WRITELONGVALUE) GetProcAddress(hndDLL,"WRITELONGVALUE");
		if (!WriteLongValue)
			return FALSE;
		ReadLongValue = (READLONGVALUE) GetProcAddress(hndDLL,"READLONGVALUE");
		if (!ReadLongValue)
			return FALSE;
		WriteFloatValue = (WRITEFLOATVALUE) GetProcAddress(hndDLL,"WRITEFLOATVALUE");
		if (!WriteFloatValue)
			return FALSE;
		ReadFloatValue = (READFLOATVALUE) GetProcAddress(hndDLL,"READFLOATVALUE");
		if (!ReadFloatValue)
			return FALSE;
		WriteStringValue = (WRITESTRINGVALUE) GetProcAddress(hndDLL,"WRITESTRINGVALUE");
		if (!WriteStringValue)
			return FALSE;
		ReadStringValue = (READSTRINGVALUE) GetProcAddress(hndDLL,"READSTRINGVALUE");
		if (!ReadStringValue)
			return FALSE;
//Alert Functions
		SoundAlert = (SOUNDALERT) GetProcAddress(hndDLL,"SOUNDALERT");
		if (!SoundAlert)
			return FALSE;
		PopupAlert = (POPUPALERT) GetProcAddress(hndDLL,"POPUPALERT");
		if (!PopupAlert)
			return FALSE;
	}
	return TRUE;

}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    isHostRunning
 * Signature: ()I
 */
int HyperOrderIFPeer::isHostRunning()
{
    // Replace the return with an appropriate value
    return IsHostRunning();
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    isHostConnected
 * Signature: ()I
 */
int HyperOrderIFPeer::isHostConnected()
{
    // Replace the return with an appropriate value
    return IsHostConnected();
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getAccountCashBalance
 * Signature: ()D
 */
double HyperOrderIFPeer::getAccountCashBalance()
{
    // Replace the return with an appropriate value
    return GetAccountCashBalance();
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getAccountUpdateTime
 * Signature: ()I
 */
int HyperOrderIFPeer::getAccountUpdateTime()
{
    // Replace the return with an appropriate value
    return GetAccountUpdateTime();
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getAccountItem
 * Signature: (I)D
 */
double HyperOrderIFPeer::getAccountItem(int number)
{
    // Replace the return with an appropriate value
    return GetAccountItem(number);
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getFirstOpenOrder
 * Signature: ()J
 */
long HyperOrderIFPeer::getFirstOpenOrder()
{
    // Replace the return with an appropriate value
    return GetFirstOpenOrder();
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getNextOpenOrder
 * Signature: (J)J
 */
long HyperOrderIFPeer::getNextOpenOrder(long prevOrdId)
{
    // Replace the return with an appropriate value
    return GetNextOpenOrder(prevOrdId);
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    buyMarket
 * Signature: ([C[C[C[CF[C[CI)J
 */
jlong HyperOrderIFPeer::Java_buyMarket(JNIEnv *env, jclass javaClass, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity)
{
    // Replace the return with an appropriate value
    const char *c_symbol = env->GetStringUTFChars(symbol, 0);
    const char *c_symType = env->GetStringUTFChars(symType, 0);
    const char *c_expiry = env->GetStringUTFChars(expiry, 0);
    const char *c_right = env->GetStringUTFChars(right, 0);
    const char *c_exchange = env->GetStringUTFChars(exchange, 0);
    const char *c_currency = env->GetStringUTFChars(currency, 0);
    long jl = BuyMarket(c_symbol, c_symType, c_expiry, c_right, strike, c_exchange, c_currency, quantity);
    env->ReleaseStringUTFChars(symbol, c_symbol);
    env->ReleaseStringUTFChars(symType, c_symType);
    env->ReleaseStringUTFChars(expiry, c_expiry);
    env->ReleaseStringUTFChars(right, c_right);
    env->ReleaseStringUTFChars(exchange, c_exchange);
    env->ReleaseStringUTFChars(currency, c_currency);
    return jl;
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    sellMarket
 * Signature: ([C[C[C[CF[C[CI)J
 */
jlong HyperOrderIFPeer::Java_sellMarket(JNIEnv *env, jclass javaClass, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity)
{
    // Replace the return with an appropriate value
    const char *c_symbol = env->GetStringUTFChars(symbol, 0);
    const char *c_symType = env->GetStringUTFChars(symType, 0);
    const char *c_expiry = env->GetStringUTFChars(expiry, 0);
    const char *c_right = env->GetStringUTFChars(right, 0);
    const char *c_exchange = env->GetStringUTFChars(exchange, 0);
    const char *c_currency = env->GetStringUTFChars(currency, 0);
    long jl = SellMarket(c_symbol, c_symType, c_expiry, c_right, strike, c_exchange, c_currency, quantity);
    env->ReleaseStringUTFChars(symbol, c_symbol);
    env->ReleaseStringUTFChars(symType, c_symType);
    env->ReleaseStringUTFChars(expiry, c_expiry);
    env->ReleaseStringUTFChars(right, c_right);
    env->ReleaseStringUTFChars(exchange, c_exchange);
    env->ReleaseStringUTFChars(currency, c_currency);
    return jl;
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    buyLimit
 * Signature: ([C[C[C[CF[C[CIF)J
 */
jlong HyperOrderIFPeer::Java_buyLimit(JNIEnv *env, jclass javaClass, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat limitPrice)
{
    // Replace the return with an appropriate value
    const char *c_symbol = env->GetStringUTFChars(symbol, 0);
    const char *c_symType = env->GetStringUTFChars(symType, 0);
    const char *c_expiry = env->GetStringUTFChars(expiry, 0);
    const char *c_right = env->GetStringUTFChars(right, 0);
    const char *c_exchange = env->GetStringUTFChars(exchange, 0);
    const char *c_currency = env->GetStringUTFChars(currency, 0);
    long jl = BuyLimit(c_symbol, c_symType, c_expiry, c_right, strike, c_exchange, c_currency, quantity, limitPrice);
    env->ReleaseStringUTFChars(symbol, c_symbol);
    env->ReleaseStringUTFChars(symType, c_symType);
    env->ReleaseStringUTFChars(expiry, c_expiry);
    env->ReleaseStringUTFChars(right, c_right);
    env->ReleaseStringUTFChars(exchange, c_exchange);
    env->ReleaseStringUTFChars(currency, c_currency);
    return jl;
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    sellLimit
 * Signature: ([C[C[C[CF[C[CIF)J
 */
jlong HyperOrderIFPeer::Java_sellLimit(JNIEnv *env, jclass javaClass, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat limitPrice)
{
    // Replace the return with an appropriate value
    const char *c_symbol = env->GetStringUTFChars(symbol, 0);
    const char *c_symType = env->GetStringUTFChars(symType, 0);
    const char *c_expiry = env->GetStringUTFChars(expiry, 0);
    const char *c_right = env->GetStringUTFChars(right, 0);
    const char *c_exchange = env->GetStringUTFChars(exchange, 0);
    const char *c_currency = env->GetStringUTFChars(currency, 0);
    long jl = SellLimit(c_symbol, c_symType, c_expiry, c_right, strike, c_exchange, c_currency, quantity, limitPrice);
    env->ReleaseStringUTFChars(symbol, c_symbol);
    env->ReleaseStringUTFChars(symType, c_symType);
    env->ReleaseStringUTFChars(expiry, c_expiry);
    env->ReleaseStringUTFChars(right, c_right);
    env->ReleaseStringUTFChars(exchange, c_exchange);
    env->ReleaseStringUTFChars(currency, c_currency);
    return jl;
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    buyStop
 * Signature: ([C[C[C[CF[C[CIF)J
 */
jlong HyperOrderIFPeer::Java_buyStop(JNIEnv *env, jclass javaClass, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat auxPrice)
{
    // Replace the return with an appropriate value
    const char *c_symbol = env->GetStringUTFChars(symbol, 0);
    const char *c_symType = env->GetStringUTFChars(symType, 0);
    const char *c_expiry = env->GetStringUTFChars(expiry, 0);
    const char *c_right = env->GetStringUTFChars(right, 0);
    const char *c_exchange = env->GetStringUTFChars(exchange, 0);
    const char *c_currency = env->GetStringUTFChars(currency, 0);
    long jl = BuyStop(c_symbol, c_symType, c_expiry, c_right, strike, c_exchange, c_currency, quantity, auxPrice);
    env->ReleaseStringUTFChars(symbol, c_symbol);
    env->ReleaseStringUTFChars(symType, c_symType);
    env->ReleaseStringUTFChars(expiry, c_expiry);
    env->ReleaseStringUTFChars(right, c_right);
    env->ReleaseStringUTFChars(exchange, c_exchange);
    env->ReleaseStringUTFChars(currency, c_currency);
    return jl;
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    sellStop
 * Signature: ([C[C[C[CF[C[CIF)J
 */
jlong HyperOrderIFPeer::Java_sellStop(JNIEnv *env, jclass javaClass, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat auxPrice)
{
    // Replace the return with an appropriate value
    const char *c_symbol = env->GetStringUTFChars(symbol, 0);
    const char *c_symType = env->GetStringUTFChars(symType, 0);
    const char *c_expiry = env->GetStringUTFChars(expiry, 0);
    const char *c_right = env->GetStringUTFChars(right, 0);
    const char *c_exchange = env->GetStringUTFChars(exchange, 0);
    const char *c_currency = env->GetStringUTFChars(currency, 0);
    long jl = SellStop(c_symbol, c_symType, c_expiry, c_right, strike, c_exchange, c_currency, quantity, auxPrice);
    env->ReleaseStringUTFChars(symbol, c_symbol);
    env->ReleaseStringUTFChars(symType, c_symType);
    env->ReleaseStringUTFChars(expiry, c_expiry);
    env->ReleaseStringUTFChars(right, c_right);
    env->ReleaseStringUTFChars(exchange, c_exchange);
    env->ReleaseStringUTFChars(currency, c_currency);
    return jl;
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    buyStopLimit
 * Signature: ([C[C[C[CF[C[CIFF)J
 */
jlong HyperOrderIFPeer::Java_buyStopLimit(JNIEnv *env, jclass javaClass, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat auxPrice, jfloat limitPrice)
{
    // Replace the return with an appropriate value
    const char *c_symbol = env->GetStringUTFChars(symbol, 0);
    const char *c_symType = env->GetStringUTFChars(symType, 0);
    const char *c_expiry = env->GetStringUTFChars(expiry, 0);
    const char *c_right = env->GetStringUTFChars(right, 0);
    const char *c_exchange = env->GetStringUTFChars(exchange, 0);
    const char *c_currency = env->GetStringUTFChars(currency, 0);
    long jl = BuyStopLimit(c_symbol, c_symType, c_expiry, c_right, strike, c_exchange, c_currency, quantity, auxPrice, limitPrice);
    env->ReleaseStringUTFChars(symbol, c_symbol);
    env->ReleaseStringUTFChars(symType, c_symType);
    env->ReleaseStringUTFChars(expiry, c_expiry);
    env->ReleaseStringUTFChars(right, c_right);
    env->ReleaseStringUTFChars(exchange, c_exchange);
    env->ReleaseStringUTFChars(currency, c_currency);
    return jl;
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    sellStopLimit
 * Signature: ([C[C[C[CF[C[CIFF)J
 */
jlong HyperOrderIFPeer::Java_sellStopLimit(JNIEnv *env, jclass javaClass, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat auxPrice, jfloat limitPrice)
{
    // Replace the return with an appropriate value
    const char *c_symbol = env->GetStringUTFChars(symbol, 0);
    const char *c_symType = env->GetStringUTFChars(symType, 0);
    const char *c_expiry = env->GetStringUTFChars(expiry, 0);
    const char *c_right = env->GetStringUTFChars(right, 0);
    const char *c_exchange = env->GetStringUTFChars(exchange, 0);
    const char *c_currency = env->GetStringUTFChars(currency, 0);
    long jl = SellStopLimit(c_symbol, c_symType, c_expiry, c_right, strike, c_exchange, c_currency, quantity, auxPrice, limitPrice);
    env->ReleaseStringUTFChars(symbol, c_symbol);
    env->ReleaseStringUTFChars(symType, c_symType);
    env->ReleaseStringUTFChars(expiry, c_expiry);
    env->ReleaseStringUTFChars(right, c_right);
    env->ReleaseStringUTFChars(exchange, c_exchange);
    env->ReleaseStringUTFChars(currency, c_currency);
    return jl;
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    BuyTrailStop
 * Signature: ([C[C[C[CF[C[CIF)J
 */
jlong HyperOrderIFPeer::Java_BuyTrailStop(JNIEnv *env, jclass javaClass, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat auxDistance)
{
    // Replace the return with an appropriate value
    const char *c_symbol = env->GetStringUTFChars(symbol, 0);
    const char *c_symType = env->GetStringUTFChars(symType, 0);
    const char *c_expiry = env->GetStringUTFChars(expiry, 0);
    const char *c_right = env->GetStringUTFChars(right, 0);
    const char *c_exchange = env->GetStringUTFChars(exchange, 0);
    const char *c_currency = env->GetStringUTFChars(currency, 0);
    long jl = BuyTrailStop(c_symbol, c_symType, c_expiry, c_right, strike, c_exchange, c_currency, quantity, auxDistance);
    env->ReleaseStringUTFChars(symbol, c_symbol);
    env->ReleaseStringUTFChars(symType, c_symType);
    env->ReleaseStringUTFChars(expiry, c_expiry);
    env->ReleaseStringUTFChars(right, c_right);
    env->ReleaseStringUTFChars(exchange, c_exchange);
    env->ReleaseStringUTFChars(currency, c_currency);
    return jl;
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    sellTrailStop
 * Signature: ([C[C[C[CF[C[CIF)J
 */
jlong HyperOrderIFPeer::Java_sellTrailStop(JNIEnv *env, jclass javaClass, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency, jint quantity, jfloat auxDistance)
{
    // Replace the return with an appropriate value
    const char *c_symbol = env->GetStringUTFChars(symbol, 0);
    const char *c_symType = env->GetStringUTFChars(symType, 0);
    const char *c_expiry = env->GetStringUTFChars(expiry, 0);
    const char *c_right = env->GetStringUTFChars(right, 0);
    const char *c_exchange = env->GetStringUTFChars(exchange, 0);
    const char *c_currency = env->GetStringUTFChars(currency, 0);
    long jl = SellTrailStop(c_symbol, c_symType, c_expiry, c_right, strike, c_exchange, c_currency, quantity, auxDistance);
    env->ReleaseStringUTFChars(symbol, c_symbol);
    env->ReleaseStringUTFChars(symType, c_symType);
    env->ReleaseStringUTFChars(expiry, c_expiry);
    env->ReleaseStringUTFChars(right, c_right);
    env->ReleaseStringUTFChars(exchange, c_exchange);
    env->ReleaseStringUTFChars(currency, c_currency);
    return jl;

}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    cancelOrder
 * Signature: (J)V
 */
void HyperOrderIFPeer::cancelOrder(long orderId)
{
     CancelOrder(orderId);
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    calcelAll
 * Signature: ()V
 */
void HyperOrderIFPeer::cancelAll()
{
      CancelAll();
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    calcelAllFor
 * Signature: ([C[C[C[CF[C[C)V
 */
void HyperOrderIFPeer::Java_cancelAllFor(JNIEnv *env, jclass javaClass, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency)
{
    const char *c_symbol = env->GetStringUTFChars(symbol, 0);
    const char *c_symType = env->GetStringUTFChars(symType, 0);
    const char *c_expiry = env->GetStringUTFChars(expiry, 0);
    const char *c_right = env->GetStringUTFChars(right, 0);
    const char *c_exchange = env->GetStringUTFChars(exchange, 0);
    const char *c_currency = env->GetStringUTFChars(currency, 0);
    CancelAllFor(c_symbol, c_symType, c_expiry, c_right, strike, c_exchange, c_currency);
    env->ReleaseStringUTFChars(symbol, c_symbol);
    env->ReleaseStringUTFChars(symType, c_symType);
    env->ReleaseStringUTFChars(expiry, c_expiry);
    env->ReleaseStringUTFChars(right, c_right);
    env->ReleaseStringUTFChars(exchange, c_exchange);
    env->ReleaseStringUTFChars(currency, c_currency);
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getMarketPosition
 * Signature: ([C[C[C[CF[C)J
 */
jlong HyperOrderIFPeer::Java_getMarketPosition(JNIEnv *env, jclass javaClass, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring currency)
{
    const char *c_symbol = env->GetStringUTFChars(symbol, 0);
    const char *c_symType = env->GetStringUTFChars(symType, 0);
    const char *c_expiry = env->GetStringUTFChars(expiry, 0);
    const char *c_right = env->GetStringUTFChars(right, 0);
    const char *c_currency = env->GetStringUTFChars(currency, 0);
    long jl = GetMarketPosition(c_symbol, c_symType, c_expiry, c_right, strike, c_currency);
    env->ReleaseStringUTFChars(symbol, c_symbol);
    env->ReleaseStringUTFChars(symType, c_symType);
    env->ReleaseStringUTFChars(expiry, c_expiry);
    env->ReleaseStringUTFChars(right, c_right);
    env->ReleaseStringUTFChars(currency, c_currency);
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    closePositionFor
 * Signature: ([C[C[C[CF[C[C)J
 */
jlong HyperOrderIFPeer::Java_closePositionFor(JNIEnv *env, jclass javaClass, jstring symbol, jstring symType, jstring expiry, jstring right, jfloat strike, jstring exchange, jstring currency)
{
    const char *c_symbol = env->GetStringUTFChars(symbol, 0);
    const char *c_symType = env->GetStringUTFChars(symType, 0);
    const char *c_expiry = env->GetStringUTFChars(expiry, 0);
    const char *c_right = env->GetStringUTFChars(right, 0);
    const char *c_exchange = env->GetStringUTFChars(exchange, 0);
    const char *c_currency = env->GetStringUTFChars(currency, 0);
    long jl = ClosePositionFor(c_symbol, c_symType, c_expiry, c_right, strike, c_exchange, c_currency);
    env->ReleaseStringUTFChars(symbol, c_symbol);
    env->ReleaseStringUTFChars(symType, c_symType);
    env->ReleaseStringUTFChars(expiry, c_expiry);
    env->ReleaseStringUTFChars(right, c_right);
    env->ReleaseStringUTFChars(exchange, c_exchange);
    env->ReleaseStringUTFChars(currency, c_currency);
    return jl;
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    startOCAGroup
 * Signature: ([C)V
 */
void HyperOrderIFPeer::Java_startOCAGroup(JNIEnv *env, jclass javaClass, jstring ocaGroup)
{
    const char *c_ocaGroup = env->GetStringUTFChars(ocaGroup, 0);
    StartOCAGroup(c_ocaGroup);
    env->ReleaseStringUTFChars(ocaGroup, c_ocaGroup);
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    stopOCAGroup
 * Signature: ()V
 */
void HyperOrderIFPeer::stopOCAGroup()
{
     StopOCAGroup();
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    setTIF
 * Signature: ([C)V
 */
void HyperOrderIFPeer::Java_setTIF(JNIEnv *env, jclass javaClass, jstring tif)
{
    const char *c_tif = env->GetStringUTFChars(tif, 0);
    SetTIF(c_tif);
    env->ReleaseStringUTFChars(tif, c_tif);
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getOrderStatus
 * Signature: (J)I
 */
int HyperOrderIFPeer::getOrderStatus(long orderId)
{
    // Replace the return with an appropriate value
    return GetOrderStatus(orderId);
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getOrderPrice
 * Signature: (J)F
 */
float HyperOrderIFPeer::getOrderPrice(long orderId)
{
    // Replace the return with an appropriate value
    return GetOrderPrice(orderId);
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getOrderFilled
 * Signature: (J)J
 */
long HyperOrderIFPeer::getOrderFilled(long orderId)
{
    // Replace the return with an appropriate value
    return GetOrderFilled(orderId);
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    getOrderRemaining
 * Signature: (J)J
 */
long HyperOrderIFPeer::getOrderRemaining(long orderId)
{
    // Replace the return with an appropriate value
    return GetOrderRemaining(orderId);
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    writeIntValue
 * Signature: ([CI)V
 */
void HyperOrderIFPeer::Java_writeIntValue(JNIEnv *env, jclass javaClass, jstring name, jint value)
{
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    readIntValue
 * Signature: ([C)I
 */
jint HyperOrderIFPeer::Java_readIntValue(JNIEnv *env, jclass javaClass, jstring name)
{
    // Replace the return with an appropriate value
    return 0;
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    writeLongValue
 * Signature: ([CJ)V
 */
void HyperOrderIFPeer::Java_writeLongValue(JNIEnv *env, jclass javaClass, jstring name, jlong value)
{
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    readLongValue
 * Signature: ([C)J
 */
jlong HyperOrderIFPeer::Java_readLongValue(JNIEnv *env, jclass javaClass, jstring name)
{
    // Replace the return with an appropriate value
    return 0;
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    writeFloatValue
 * Signature: ([CF)V
 */
void HyperOrderIFPeer::Java_writeFloatValue(JNIEnv *env, jclass javaClass, jstring name, jfloat value)
{
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    readFloatValue
 * Signature: ([C)F
 */
jfloat HyperOrderIFPeer::Java_readFloatValue(JNIEnv *env, jclass javaClass, jstring name)
{
    // Replace the return with an appropriate value
    return 0;
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    writeStringValue
 * Signature: ([C[C)V
 */
void HyperOrderIFPeer::Java_writeStringValue(JNIEnv *env, jclass javaClass, jstring name, jstring value)
{
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    readStringValue
 * Signature: ([C)Ljava/lang/String;
 */
jstring HyperOrderIFPeer::Java_readStringValue(JNIEnv *env, jclass javaClass, jstring name)
{
    // Replace the return with an appropriate value
    return NULL;
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    soundAlert
 * Signature: ([C)V
 */
void HyperOrderIFPeer::Java_soundAlert(JNIEnv *env, jclass javaClass, jstring path)
{
    const char *c_path = env->GetStringUTFChars(path, 0);
    SoundAlert(c_path);
    env->ReleaseStringUTFChars(path, c_path);
}

/*
 * Class:     com_qbyteconsulting_HyperOrderIF
 * Method:    popupAlert
 * Signature: ([C[C)V
 */
void HyperOrderIFPeer::Java_popupAlert(JNIEnv *env, jclass javaClass, jstring text, jstring path)
{
    const char *c_text = env->GetStringUTFChars(text, 0);
    const char *c_path = env->GetStringUTFChars(path, 0);
    PopupAlert(c_text, c_path);
    env->ReleaseStringUTFChars(text, c_text);
    env->ReleaseStringUTFChars(path, c_path);
}

